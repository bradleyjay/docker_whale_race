{"version":3,"sources":["components/Graph.js","components/FormLeftPanel.js","components/CompletedLeftPanel.js","components/InProgressLeftPanel.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["chart","am4core","am4charts","categoryAxis","yAxes","push","dataFields","category","title","text","valueAxis","xAxes","min","value","series","categoryY","valueX","Graph","props","this","dispose","data","word1","count1","word2","count2","word3","count3","id","style","width","height","React","Component","FormLeftPanel","onSubmit","handleSubmit","htmlFor","name","type","onChange","handleChange","duration","CompletedLeftPanel","InProgressLeftPanel","Main","event","setState","target","console","log","state","preventDefault","gameState","bind","className","App","window","token","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"js/main.860227fe.chunk.js","sourcesContent":["import React from 'react';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\n\n// Create the chart from amChart library\nlet chart = am4core.create(\"chartdiv\", am4charts.XYChart);\n\n// Creates categories/qualitative on Y-axis\nlet categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());\ncategoryAxis.dataFields.category = \"word\";\ncategoryAxis.title.text = \"Word\";\n\n// Creates values/quantitative on X-axis\nlet valueAxis = chart.xAxes.push(new am4charts.ValueAxis());\nvalueAxis.min = 0;\nvalueAxis.dataFields.value = \"cumsum\";\nvalueAxis.title.text = \"Count\";\n\n// Associates the categorical/quantitative data to datafields\nlet series = chart.series.push(new am4charts.ColumnSeries());\nseries.dataFields.categoryY = \"word\";\nseries.dataFields.valueX = \"cumsum\";\n\n\n\n\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n  componentDidMount() {\n\n    this.chart = chart;\n  }\n\n  componentWillUnmount() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  }\n\n  render() {\n    // Actual data\n    chart.data = [{\n      \"word\": this.props.word1,\n      \"cumsum\": this.props.count1\n    }, {\n      \"word\": this.props.word2,\n      \"cumsum\": this.props.count2\n    }, {\n      \"word\": this.props.word3,\n      \"cumsum\": this.props.count3\n    }\n    ];\n    return (\n      <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }}></div>\n    );\n  }\n}\n\nexport default Graph;\n","import React, {Component} from 'react';\n\nexport class FormLeftPanel extends Component {\n    constructor(props) {\n      super(props);\n    }\n  \n    render() {\n        return (\n            <form onSubmit={this.props.handleSubmit}>\n              <label htmlFor=\"words\">\n                  Words:\n                  <br/>\n                  <input\n                  name=\"word1\"\n                  type=\"text\"\n                  value={this.props.word1}\n                  onChange={this.props.handleChange}\n                  />\n                  <br/>\n                  <input\n                  name=\"word2\"\n                  type=\"text\"\n                  value={this.props.word2}\n                  onChange={this.props.handleChange}\n                  />\n                  <br/>\n                  <input\n                  name=\"word3\"\n                  type=\"text\"\n                  value={this.props.word3}\n                  onChange={this.props.handleChange}\n                  />\n              </label>\n              <br />\n              <br />\n              <label htmlFor=\"duration\">\n                  Duration:\n                  <br/>\n                  <input\n                  name=\"duration\"\n                  type=\"number\"\n                  value={this.props.duration}\n                  onChange={this.props.handleChange}\n                  />\n              </label>\n              <br />\n              <input type=\"submit\" value=\"Start\" />\n            </form>\n      );\n    }\n  }\n\n  export default FormLeftPanel\n","import React, {Component} from 'react';\n\nexport class CompletedLeftPanel extends Component {\n    constructor(props) {\n      super(props);\n    }\n  \n    render() {\n        return (\n            <h1>A Whale Won!!!</h1>\n      );\n    }\n  }\n\n  export default CompletedLeftPanel\n","import React, {Component} from 'react';\n\nexport class InProgressLeftPanel extends Component {\n    constructor(props) {\n      super(props);\n    }\n  \n    render() {\n        return (\n            <h1>Game in Progress</h1>\n      );\n    }\n  }\n\n  export default InProgressLeftPanel\n","import React, {Component} from 'react';\nimport Graph from './Graph'\nimport FormLeftPanel from './FormLeftPanel'\nimport CompletedLeftPanel from './CompletedLeftPanel'\nimport InProgressLeftPanel from './InProgressLeftPanel'\n\nexport class Main extends Component {\n    constructor() {\n      super();\n      this.state = {\n        word1: 'word1',\n        word2: 'word2',\n        word3: 'word3',\n        count1: 10,\n        count2: 20,\n        count3: 30,\n        duration: 0,\n        gameState: 0 // Form = 0, InProgress = 1, Completed = 2\n\n      };\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange = event => {\n        this.setState({\n          [event.target.name]: event.target.value,\n        });\n      };\n    \n    handleSubmit = event => {\n        console.log(this.state)\n        event.preventDefault(event);\n        // this.setState({\n        //     word1: '',\n        //     word2: '',\n        //     word3: '',\n        //     duration: 0\n        // });\n    };\n\n    render() {\n        return (\n            <div className=\"flex-row\">\n              <FormLeftPanel \n                handleChange = {this.handleChange}\n                handleSubmit = {this.handleSubmit}\n                word1={this.state.word1}\n                word2={this.state.word2}\n                word3={this.state.word3}\n                duration={this.state.duration}\n              />\n              <InProgressLeftPanel/>\n              <CompletedLeftPanel/>\n              <Graph\n                count1={this.state.count1}\n                count2={this.state.count2}\n                count3={this.state.count3}\n                word1={this.state.word1}\n                word2={this.state.word2}\n                word3={this.state.word3}\n              />\n            </div>\n        )\n    }\n}\n\nexport default Main\n","import React from 'react';\nimport Main from './components/Main'\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <p>My Token = {window.token}</p>\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}